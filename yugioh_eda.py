# -*- coding: utf-8 -*-
"""Yugioh EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eQF9AUAzmqGwIs5c45i6zhHWb0aTMs_p
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

prices = pd.read_csv("yugioh-prices.csv")
# Data source treats these as their lower rarity counterparts, so remove them from the dataset
prices = prices.loc[(prices['rarity'] != 'Starlight Rare') & (prices['rarity'] != "Collector's Rare")]

n = prices["name"].value_counts()
lowest_others = prices.groupby('name').min('min_price')['min_price']
highest_others = prices.groupby('name').max('min_price')['min_price']

prices['num_printings'] = [n[x] for x in prices['name']]
prices['cheapest_copy'] = [lowest_others[x] for x in prices['name']]
prices['expensive_copy'] = [highest_others[x] for x in prices['name']]
prices['ratio'] = prices['expensive_copy']/prices['cheapest_copy']

unique_cards = prices.loc[prices['Unnamed: 0'] == 0]
a = []
for i in range(10000):
  test = unique_cards.sample(70, replace=True)
  a.append(sum(test['expensive_copy'])-sum(test['cheapest_copy']))

sns.set_style("darkgrid")
sns.histplot(a, stat="density")
plt.title("10,000 Random Yugioh Decks' Prices")
plt.xlabel("Difference between most expensive and cheapest printings($)")
plt.xlim((0,10000))
plt.show()

d = prices.sort_values('avg_price').tail(10)
d[['name', 'avg_price']].plot(kind='bar', x='name', xlabel='Card Name', ylabel="Price (Dollars)")

d2 = prices.loc[prices["num_printings"] == 1].sort_values('avg_price').tail(10)
d2[['name', 'avg_price']].plot(kind='bar', x='name', xlabel='Card Name', ylabel="Price (Dollars)")

d

sns.set_style("darkgrid")

plt.figure(figsize=(10,10))
sns.boxplot(data=prices, x="rarity", y="min_price", palette="Blues")
plt.xticks(rotation=90)
plt.yscale("log")
plt.ylabel("Lowest List Price (Dollars)")
plt.xlabel("Card Type")
plt.yticks(ticks=[.1, 1, 10, 100, 1000, 10000], labels=["0.10", "1.00", "10.00", "100.00", "1,000.00", "10,000.00"])

plt.figure(figsize=(10,5))
prices2 = prices
sns.heatmap(prices2[['rarity', 'avg_price','min_price', 'num_printings', 'cheapest_copy', 'name']].corr(method="pearson"), cmap="GnBu", annot=True, square=True)
plt.yticks(rotation=0)
plt.title("Correlation Matrix")

# Use only 1 of each card name, mean of cheapest_copy will equal cheapest_copy
sns.kdeplot(data=prices.groupby('name').mean(), x='cheapest_copy')
plt.xlabel("Cheapest Version Price")



